name: azure-functions-python-app-containerized-deployment

env:
  AZURE_FUNCTIONAPP_NAME: "azure-func-python-containerized-app"
  PYTHON_VERSION: "3.11"
  IMAGE_NAME: azure-python-function-app
  IMAGE_TAG: v1
  AZURE_REGISTRY_LOGIN_SERVER: "demofunctionappregistry.azurecr.io"
  AZURE_REGISTRY_SERVER_NAME: "demofunctionappregistry"
  AZURE_REGISTRY_USERNAME: demofunctionappregistry

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: ["main"]
  # pull_request:
  #   branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build-and-deploy:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Python ${{ env.PYTHON_VERSION }} Environment
        uses: actions/setup-python@v1
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      # - name: Create and start virtual environment
      #   run: |
      #     python -m venv .venv
      #     source .venv/bin/activate

      - name: install python dependencies
        shell: bash
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest-cov

      # Run test cases
      # - name: "run test cases"
      #   shell: bash
      #   run: |
      #     python -m pytest --junitxml=test-results/results.xml --cov=. --cov-report=xml

      - name: Azure login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Azure ACR Login
        run: |
          az acr login --name ${{ env.AZURE_REGISTRY_SERVER_NAME }}

      - name: build docker & push image to Azure ACR using AZ CLI
        run: |
          docker build -t ${{ env.AZURE_REGISTRY_LOGIN_SERVER }}/${{env.IMAGE_NAME}}:${{env.IMAGE_TAG}} .
          docker push ${{ env.AZURE_REGISTRY_LOGIN_SERVER }}/${{env.IMAGE_NAME}}:${{env.IMAGE_TAG}}

      # - name: Build and push
      #   uses: docker/build-push-action@v2
      #   with:
      #     context: .
      #     push: true
      #     tags: ${{ env.AZURE_REGISTRY_LOGIN_SERVER}}/${{env.IMAGE_NAME}}:${{env.IMAGE_TAG}}

      # Publish docker image to Azure Function App.
      - name: "Update Azure Function App Container with Image"
        uses: Azure/functions-container-action@v1
        id: function-app-container
        with:
          app-name: ${{env.AZURE_FUNCTIONAPP_NAME}}
          image: ${{ env.AZURE_REGISTRY_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

      # Remove docker image locally after pushing to ACR
      - name: Remove docker image locally after pushing to ACR
        run: |
          docker rmi ${{ env.AZURE_REGISTRY_LOGIN_SERVER }}/${{env.IMAGE_NAME}}:${{env.IMAGE_TAG}}
          docker container prune -f
          docker images --filter "dangling=true" -q | xargs -r docker rmi

      # Run az logout.
      - name: Azure logout
        run: |
          az logout
